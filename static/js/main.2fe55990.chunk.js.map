{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CryptoJS","require","App","AES","console","log","document","getElementsByName","value","chave","enc","Utf8","parse","info","crypt","encrypt","mode","ECB","toString","decrypt","SHA2","SHA256","Base64","className","placeholder","name","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iOACIA,EAAWC,EAAQ,IA+DRC,MA7Df,WACE,IAAIC,EACO,WACPC,QAAQC,IAAIC,SAASC,kBAAkB,SAAS,GAAGC,OACnD,IAAIC,EAAOT,EAASU,IAAIC,KAAKC,MAAMN,SAASC,kBAAkB,SAAS,GAAGC,OACtEK,EAAOP,SAASC,kBAAkB,YAAY,GAAGC,MACtDJ,QAAQC,IAAII,GAEZ,IAAIK,EAASd,EAASG,IAAIY,QAAQF,EAAMJ,EAAM,CAAEO,KAAMhB,EAASgB,KAAKC,MAAOC,WAC5EZ,SAASC,kBAAkB,UAAU,GAAGC,MAAQM,GAR9CX,EAWkB,WACV,IAAIM,EAAOT,EAASU,IAAIC,KAAKC,MAAMN,SAASC,kBAAkB,SAAS,GAAGC,OAC1EJ,QAAQC,IAAII,GACZ,IAAII,EAAOP,SAASC,kBAAkB,UAAU,GAAGC,MAC/CM,EAAOd,EAASG,IAAIgB,QAAQN,EAAMJ,EAAM,CAAEO,KAAMhB,EAASgB,KAAKC,MAC5EX,SAASC,kBAAkB,YAAY,GAAGC,MAAQM,EAAMI,SAASlB,EAASU,IAAIC,OAE5ES,EAAkB,WACpB,IAAIX,EAAQT,EAASU,IAAIC,KAAKC,MAAMN,SAASC,kBAAkB,WAAW,GAAGC,OAC5EC,EAAQT,EAASqB,OAAOZ,GACzBH,SAASC,kBAAkB,WAAW,GAAGC,MAAQC,EAAMS,SAASlB,EAASU,IAAIY,SAW/E,OACE,sBAAKC,UAAU,MAAf,UACE,qCACA,0BAAUC,YAAY,gBAAgBC,KAAK,UAE3C,sBAAKF,UAAU,QAAf,UACI,0BAAUC,YAAY,WAAWC,KAAK,aAEtC,gCACE,wBAAQC,QAAS,kBAAIvB,KAArB,uBACA,wBAAQuB,QAAS,kBAAIvB,KAArB,6BAEF,0BAAUqB,YAAY,sBAAsBC,KAAK,cAErD,uCAEA,sBAAKF,UAAU,QAAf,UACA,0BAAUC,YAAY,WAAWC,KAAK,YAClC,8BACC,wBAAQC,QAAS,kBAAIN,KAArB,yBAGD,0BAAUI,YAAY,sBAAqBC,KAAK,mBC9C3CE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASiC,eAAe,SAM1BZ,M","file":"static/js/main.2fe55990.chunk.js","sourcesContent":["import './App.css';\nvar CryptoJS = require(\"crypto-js\");\n\nfunction App() {\n  var AES = {\n    encript: function encript(){\n      console.log(document.getElementsByName(\"frase\")[0].value)\n      var chave= CryptoJS.enc.Utf8.parse(document.getElementsByName(\"frase\")[0].value);\n      var info = document.getElementsByName(\"AESMENSA\")[0].value\n     console.log(chave)\n\n     var crypt =  CryptoJS.AES.encrypt(info, chave,{ mode: CryptoJS.mode.ECB }).toString();\n    document.getElementsByName(\"AESENC\")[0].value = crypt;\n\n  },\n            desencript: function desenc(){\n              var chave= CryptoJS.enc.Utf8.parse(document.getElementsByName(\"frase\")[0].value);\n              console.log(chave);\n              var info = document.getElementsByName(\"AESENC\")[0].value\n              var crypt= CryptoJS.AES.decrypt(info, chave,{ mode: CryptoJS.mode.ECB });\n    document.getElementsByName(\"AESMENSA\")[0].value = crypt.toString(CryptoJS.enc.Utf8)\n            }}\n  var SHA2 = { encript: function encript(){\n    var chave = CryptoJS.enc.Utf8.parse(document.getElementsByName(\"SHA2MEN\")[0].value)\n     chave = CryptoJS.SHA256(chave);\n    document.getElementsByName(\"SHA2ENC\")[0].value = chave.toString(CryptoJS.enc.Base64);\n\n  },}\n          \n    function hex2a(hexx) {\n              var hex = hexx.toString();//force conversion\n              var str = '';\n              for (var i = 0; i < hex.length; i += 2)\n                  str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n              return str;\n          }\n  return (\n    <div className=\"App\">\n      <h2>AES</h2>\n      <textarea placeholder=\"frase secreta\" name=\"frase\"></textarea>\n\n      <div className=\"first\">\n          <textarea placeholder=\"mensagem\" name=\"AESMENSA\" ></textarea>\n\n          <div>\n            <button onClick={()=>AES.encript()}>encriptar</button>\n            <button onClick={()=>AES.desencript()}>desencriptar</button>\n          </div>\n          <textarea placeholder=\"mensagem encriptada\" name=\"AESENC\"></textarea>\n      </div>\n      <h2>SHA-2</h2>\n\n      <div className=\"first\">\n      <textarea placeholder=\"mensagem\" name=\"SHA2MEN\" ></textarea>\n          <div>\n           <button onClick={()=>SHA2.encript()}>encriptar</button>\n            {/* <button onClick={()=>SHA2.desencript()}>desencriptar</button> */}\n          </div>\n          <textarea placeholder=\"mensagem encriptada\"name=\"SHA2ENC\" ></textarea>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}